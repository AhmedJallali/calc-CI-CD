name: Build, Analyze, and Deploy

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Étape 2 : Configuration de Java (nécessaire pour SonarQube)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin

      # Étape 3 : Analyse SonarQube
      - name: Run SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@v2.1.0 # Remplacez par la version requise
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./sources
          args: >
            -Dsonar.projectKey=mp2l
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**

      # Étape 4 : Vérification du Quality Gate
      - name: Check Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-deploy:
    name: Build and Deploy to Azure App Service
    needs: sonar
    if: success() # Exécute uniquement si l'analyse SonarQube réussit
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Connexion à Azure via CLI
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Étape 3 : Connexion à Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: mp2lacr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Étape 4 : Construction et push de l'image Docker
      - name: Build and Push Docker Image
        run: |
          docker build ./sources -f ./sources/Dockerfile -t mp2lacr.azurecr.io/mp2l:${{ github.sha }}
          docker push mp2lacr.azurecr.io/mp2l:${{ github.sha }}

      # Étape 5 : Déploiement sur Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: mp2lwebapp2
          images: mp2lacr.azurecr.io/mp2l:${{ github.sha }}

      # Étape 6 : Déconnexion d'Azure
      - name: Azure Logout
        run: |
          az logout
